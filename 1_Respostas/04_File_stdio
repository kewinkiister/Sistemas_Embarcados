1.Crie um código em C para escrever "Ola mundo!" em um arquivo chamado 'ola_mundo.txt'.
Arquivo ola_mundo.txt:
Ola Mundo!

Arquivo ola_mundo.c:
#include <stdio.h>
#include <stdlib.h>
int main(int argc, const char * argv[]) {
    FILE *fp;
    char c;
    fp = fopen("ola_mundo.txt","r"); /* Arquivo ASCII, para leitura */
    if(!fp)
    {
        printf( "Erro na abertura do arquivo");
exit(-1); }
while((c = getc(fp) ) != EOF) /* Enquanto não chegar ao final do arquivo */ 
printf("%c", c); /* imprime o caracter lido */
printf("\n");
fclose(fp);
return 0;
}

Comando terminal:
$ gcc ola_mundo.c -o ola_mundo
$./ola_mundo
$Ola mundo!

2.Crie um código em C que pergunta ao usuário seu nome e sua idade, e escreve este conteúdo em um arquivo com o seu nome
e extensão '.txt'. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_1':
Arquivo ola_usuario_1.c:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int main(int argc, const char * argv[]) {
FILE *fp;
char nome[20];
char a[20];
char idade[5];

	printf("Digite seu nome:");
	scanf("%s",nome);
	strcpy(a, nome);
	printf("Digite sua idade:");
	scanf("%s", idade); 
	strcat(nome,".txt");  
	fp = fopen(nome, "w+");  

	if(!fp)  printf("Erro de escrita");  

	fprintf(fp, "Nome: %s\n", a);  
	fprintf(fp, "Idade: %s\n", idade);  

	fclose(fp);  
	return 0; 
    
3.Crie um código em C que recebe o nome do usuário e e sua idade como argumentos de entrada (usando as variáveis 
argc e *argv[]), e escreve este conteúdo em um arquivo com o seu nome e extensão '.txt'. Por exemplo, considerando 
que o código criado recebeu o nome de 'ola_usuario_2':

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int main(int argc, char * argv[]) {
FILE *fp;
	char name[20];
	strcpy(name, argv[1]);
	strcat(name, ".txt");
	fp = fopen(name, "w+");  

	if(!fp)  printf("Erro de escrita");  
	fprintf(fp, "Nome: %s\n", argv[1]);  
	fprintf(fp, "Idade: %s\n", argv[2]);  

	fclose(fp);  
	return 0;  
}

4.Crie uma função que retorna o tamanho de um arquivo, usando o seguinte protótipo: int tam_arq_texto(char *nome_arquivo); 
Salve esta função em um arquivo separado chamado 'bib_arqs.c'. Salve o protótipo em um arquivo chamado 'bib_arqs.h'. Compile
'bib_arqs.c' para gerar o objeto 'bib_arqs.o'.

5. Crie uma função que lê o conteúdo de um arquivo-texto e o guarda em uma string, usando o seguinte protótipo: char* 
le_arq_texto(char *nome_arquivo); Repare que o conteúdo do arquivo é armazenado em um vetor interno à função, e o endereço
do vetor é retornado ao final. (Se você alocar este vetor dinamicamente, lembre-se de liberar a memória dele quando acabar o 
seu uso.) Salve esta função no mesmo arquivo da questão 4, chamado 'bib_arqs.c'. Salve o protótipo no arquivo 'bib_arqs.h'. 
Compile 'bib_arqs.c' novamente para gerar o objeto 'bib_arqs.o'.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int main(int argc, char * argv[]) {
	FILE *fp;
	char c;
	char a[1];	
	char text[100];
	char arquivo[50];
	printf("Nome do arquivo .txt: ");
	scanf("%s", arquivo);
	fp = fopen(arquivo,"r"); /* Arquivo ASCII, para leitura */
	if(!fp)
   	{
        	printf( "Erro na abertura do arquivo");
		exit(-1); 
	}
	while((fgets(text, 100, fp)) != NULL)
	printf("%s", text);
	fclose(fp);
	return 0;
	}
