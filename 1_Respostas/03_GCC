1.Crie um "Olá mundo!" em C.
    #include <stdio.h>
    
     int main(void)
     {
             printf("Ola Mundo! \n"); 
             return 0;
     }

2. Crie um código em C que pergunta ao usuário o seu nome, e imprime no terminal "Ola " e o nome do usuário. 
Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_1':
	$ ./2
	$ Digite o seu nome: Eu
	$ Ola Eu

    #include <stdio.h>
    #include <stdlib.h>

    char name[20];
    
    int main(void)
    {
        printf("Digite seu name: ");
        scanf("%s", name);
        printf("Olá %s \n", name);
        return 0;
    }

3. Apresente os comportamentos do código anterior nos seguintes casos:
	(a) Se o usuário insere mais de um nome.
		$ ./ola_usuario_1 Eu Mesmo

	$ ./ola_usuario
        $Digite seu nome: Kewin
        $Olá kewin

	(b) Se o usuário insere mais de um nome entre parênteses. Por exemplo:
		$ ./ola_usuario_1 "Eu Mesmo"

	$ ./ola_usuario
        $Digite seu nome: "Kewin kuster"
        $Olá "Kewin

	(c) Se é usado um pipe. Por exemplo:
		$ echo Eu | ./ola_usuario_1

        echo Oi | ./ola_usuario
        Digite seu nome: Olá Oi

	(d) Se é usado um pipe com mais de um nome. Por exemplo:
		$ echo Eu Mesmo | ./ola_usuario_1

        echo Oi Olá | ./ola_usuario
        Digite seu nome: Olá Oi

	(e) Se é usado um pipe com mais de um nome entre parênteses. Por exemplo:
		$ echo Eu Mesmo | ./ola_usuario_1

        echo "Oi Olá" | ./ola_usuario
        Digite seu nome: Olá Oi

	(f) Se é usado o redirecionamento de arquivo. Por exemplo:
		$ echo Ola mundo cruel! > ola.txt
		$ ./ola_usuario_1 < ola.txt

        echo Ola mundo cruel! > ola.txt
        ./ola_usuario < ola.txt 
        Digite seu nome: Olá Ola 


4. Crie um código em C que recebe o nome do usuário como um argumento de entrada (usando as variáveis argc e *argv[]),
e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_2':
	
    código:
#include <stdio.h>
#include <string.h>

int main(int argc, char const *argv[])
{
	int i;
	printf("Ola");
	for (i=1; i<argc; i++){
	printf(" %s", argv[i]);
	}
	printf("\n");
	return 0;
}

terminal:
./ola_usuario_2 Kewin kuster
Ola Kewin kuster

5.Apresente os comportamentos do código anterior nos seguintes casos:

(a) Se o usuário insere mais de um nome.
$ ./ola_usuario_2 Eu Mesmo
Ola Eu Mesmo

(b) Se o usuário insere mais de um nome entre aspas duplas. Por exemplo:
$ ./ola_usuario_2 "Eu Mesmo"
Ola Eu Mesmo

(c) Se é usado um pipe. Por exemplo:
$ echo Eu | ./ola_usuario_2
$ Ola

(d) Se é usado um pipe com mais de um nome. Por exemplo:
$ echo Eu Mesmo | ./ola_usuario_2
$ Ola

(e) Se é usado um pipe com mais de um nome entre aspas duplas. Por exemplo:
$ Ola

(f) Se é usado o redirecionamento de arquivo. Por exemplo:
$ echo Ola mundo cruel! > texto.txt
$ Ola

6. Crie um código em C que faz o mesmo que o código da questão 4, e em seguida imprime no terminal quantos valores
de entrada foram fornecidos pelo usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_3':

Codigo:#include <stdio.h>
#include <string.h>

int main(int argc, char const *argv[])
{
	int i;
	printf("Ola");
	for (i=1; i<argc; i++){
	printf(" %s", argv[i]);
	}
	printf("\nNumero de entradas = %d \n", argc);
	return 0;
}

7. Crie um código em C que imprime todos os argumentos de entrada fornecidos pelo usuário. Por exemplo, considerando que o 
código criado recebeu o nome de 'ola_argumentos':
#include <stdio.h>
#include <string.h>

int main(int argc, char const *argv[])
{
	int i;
	printf("Argumentos: ");
	for (i=1; i<argc; i++){
	printf(" %s", argv[i]);
	}
	printf(" \n");
	return 0;
}

